<?xml version="1.0" encoding="UTF-8"?>
<svg width="900" height="700" xmlns="http://www.w3.org/2000/svg">
  <!-- Visual styling -->
  <defs>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#4285f4" />
    </marker>
    <filter id="drop-shadow" x="-20%" y="-20%" width="140%" height="140%">
      <feGaussianBlur in="SourceAlpha" stdDeviation="3" />
      <feOffset dx="2" dy="2" result="offsetblur" />
      <feComponentTransfer>
        <feFuncA type="linear" slope="0.3" />
      </feComponentTransfer>
      <feMerge>
        <feMergeNode />
        <feMergeNode in="SourceGraphic" />
      </feMerge>
    </filter>
    <!-- Color scheme -->
    <linearGradient id="componentGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#3f51b5" />
      <stop offset="100%" stop-color="#303f9f" />
    </linearGradient>
    <linearGradient id="serviceGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#009688" />
      <stop offset="100%" stop-color="#00796b" />
    </linearGradient>
    <linearGradient id="dbGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#5d4037" />
      <stop offset="100%" stop-color="#3e2723" />
    </linearGradient>
    <linearGradient id="agentGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#673ab7" />
      <stop offset="100%" stop-color="#512da8" />
    </linearGradient>
    <linearGradient id="moduleGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#ff5722" />
      <stop offset="100%" stop-color="#e64a19" />
    </linearGradient>
    <linearGradient id="apiGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" stop-color="#2196f3" />
      <stop offset="100%" stop-color="#1976d2" />
    </linearGradient>
  </defs>

  <!-- Background -->
  <rect width="900" height="700" fill="#0f1117" />
  <text x="450" y="30" font-family="Arial" font-size="22" text-anchor="middle" fill="#ffffff">Agent Routing Architecture</text>
  <text x="450" y="55" font-family="Arial" font-size="14" text-anchor="middle" fill="#aaaaaa">Detailed Components and Connections</text>

  <!-- API Gateway -->
  <rect x="370" y="80" width="160" height="60" rx="5" ry="5" fill="url(#apiGradient)" filter="url(#drop-shadow)" />
  <text x="450" y="115" font-family="Arial" font-size="14" text-anchor="middle" fill="#ffffff">API Gateway</text>
  <text x="450" y="130" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">(/api/v1/graph-chat/chat)</text>

  <!-- GraphBrainService -->
  <rect x="370" y="200" width="160" height="60" rx="5" ry="5" fill="url(#serviceGradient)" filter="url(#drop-shadow)" />
  <text x="450" y="230" font-family="Arial" font-size="14" text-anchor="middle" fill="#ffffff">GraphBrainService</text>
  <text x="450" y="245" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">Core Orchestration Service</text>

  <!-- RouterNode -->
  <rect x="370" y="320" width="160" height="60" rx="5" ry="5" fill="url(#componentGradient)" filter="url(#drop-shadow)" />
  <text x="450" y="350" font-family="Arial" font-size="14" text-anchor="middle" fill="#ffffff">AgentRouter</text>
  <text x="450" y="365" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">Intent Detection & Routing</text>

  <!-- Database -->
  <rect x="120" y="320" width="140" height="60" rx="5" ry="5" fill="url(#dbGradient)" filter="url(#drop-shadow)" />
  <text x="190" y="350" font-family="Arial" font-size="14" text-anchor="middle" fill="#ffffff">Database</text>
  <text x="190" y="365" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">Agent Configurations</text>

  <!-- PatternStore -->
  <rect x="120" y="430" width="140" height="60" rx="5" ry="5" fill="url(#moduleGradient)" filter="url(#drop-shadow)" />
  <text x="190" y="460" font-family="Arial" font-size="14" text-anchor="middle" fill="#ffffff">PatternStore</text>
  <text x="190" y="475" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">Regex & Keywords</text>

  <!-- VectorStore -->
  <rect x="120" y="530" width="140" height="60" rx="5" ry="5" fill="url(#moduleGradient)" filter="url(#drop-shadow)" />
  <text x="190" y="560" font-family="Arial" font-size="14" text-anchor="middle" fill="#ffffff">VectorStore</text>
  <text x="190" y="575" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">Semantic Embeddings</text>

  <!-- AgentFactory -->
  <rect x="640" y="260" width="140" height="60" rx="5" ry="5" fill="url(#serviceGradient)" filter="url(#drop-shadow)" />
  <text x="710" y="290" font-family="Arial" font-size="14" text-anchor="middle" fill="#ffffff">AgentFactory</text>
  <text x="710" y="305" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">Dynamic Agent Creation</text>

  <!-- Specialized Agents -->
  <rect x="370" y="430" width="160" height="200" rx="5" ry="5" fill="#1f2937" filter="url(#drop-shadow)" />
  <text x="450" y="450" font-family="Arial" font-size="14" text-anchor="middle" fill="#ffffff">Specialized Agents</text>

  <!-- Reset Password Agent -->
  <rect x="385" y="470" width="130" height="40" rx="5" ry="5" fill="url(#agentGradient)" filter="url(#drop-shadow)" />
  <text x="450" y="495" font-family="Arial" font-size="12" text-anchor="middle" fill="#ffffff">Reset Password</text>

  <!-- Store Locator Agent -->
  <rect x="385" y="520" width="130" height="40" rx="5" ry="5" fill="url(#agentGradient)" filter="url(#drop-shadow)" />
  <text x="450" y="545" font-family="Arial" font-size="12" text-anchor="middle" fill="#ffffff">Store Locator</text>

  <!-- General Conversation Agent -->
  <rect x="385" y="570" width="130" height="40" rx="5" ry="5" fill="url(#agentGradient)" filter="url(#drop-shadow)" />
  <text x="450" y="595" font-family="Arial" font-size="12" text-anchor="middle" fill="#ffffff">General Conversation</text>

  <!-- Memory Service -->
  <rect x="640" y="380" width="140" height="60" rx="5" ry="5" fill="url(#serviceGradient)" filter="url(#drop-shadow)" />
  <text x="710" y="410" font-family="Arial" font-size="14" text-anchor="middle" fill="#ffffff">MemoryService</text>
  <text x="710" y="425" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">Context Management</text>

  <!-- Connections with arrows -->
  <line x1="450" y1="140" x2="450" y2="200" stroke="#4285f4" stroke-width="2" marker-end="url(#arrowhead)" />
  <text x="510" y="170" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">1. process_message(message, session_id, context)</text>

  <line x1="450" y1="260" x2="450" y2="320" stroke="#4285f4" stroke-width="2" marker-end="url(#arrowhead)" />
  <text x="510" y="290" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">2. route_message(message, context)</text>

  <line x1="370" y1="350" x2="260" y2="350" stroke="#4285f4" stroke-width="2" marker-end="url(#arrowhead)" />
  <text x="315" y="335" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">3. load_agents()</text>

  <line x1="190" y1="380" x2="190" y2="430" stroke="#4285f4" stroke-width="2" marker-end="url(#arrowhead)" />
  <text x="250" y="405" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">4. build_pattern_store()</text>

  <line x1="190" y1="490" x2="190" y2="530" stroke="#4285f4" stroke-width="2" marker-end="url(#arrowhead)" />
  <text x="250" y="510" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">5. build_vector_store()</text>

  <line x1="260" y1="460" x2="370" y2="350" stroke="#4285f4" stroke-width="2" marker-end="url(#arrowhead)" />
  <text x="315" y="390" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">6. keyword_prefilter(query)</text>

  <line x1="260" y1="560" x2="370" y2="380" stroke="#4285f4" stroke-width="2" marker-end="url(#arrowhead)" />
  <text x="315" y="500" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">7. semantic_search(query)</text>

  <line x1="450" y1="380" x2="450" y2="430" stroke="#4285f4" stroke-width="2" marker-end="url(#arrowhead)" />
  <text x="510" y="405" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">8. select_agent(confidence_scores)</text>

  <line x1="530" y1="350" x2="640" y2="290" stroke="#4285f4" stroke-width="2" marker-end="url(#arrowhead)" />
  <text x="590" y="300" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">9. create_agent(agent_id)</text>

  <line x1="710" y1="320" x2="710" y2="380" stroke="#4285f4" stroke-width="2" marker-end="url(#arrowhead)" />
  <text x="765" y="350" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">10. integrate_memory()</text>

  <line x1="640" y1="410" x2="550" y2="450" stroke="#4285f4" stroke-width="2" marker-end="url(#arrowhead)" />
  <text x="595" y="420" font-family="Arial" font-size="10" text-anchor="middle" fill="#ffffff">11. provide_context()</text>

  <!-- API Details Box -->
  <rect x="600" y="500" width="250" height="160" rx="5" ry="5" fill="#1a2233" filter="url(#drop-shadow)" opacity="0.9" />
  <text x="725" y="520" font-family="Arial" font-size="14" text-anchor="middle" fill="#ffffff">API Integration Details</text>
  
  <text x="615" y="545" font-family="Arial" font-size="12" fill="#4285f4">POST /api/v1/graph-chat/chat</text>
  <text x="615" y="565" font-family="Arial" font-size="10" fill="#aaaaaa">Request: {</text>
  <text x="625" y="580" font-family="Arial" font-size="10" fill="#aaaaaa">  "message": "I need to reset my password",</text>
  <text x="625" y="595" font-family="Arial" font-size="10" fill="#aaaaaa">  "session_id": "user-123-session",</text>
  <text x="625" y="610" font-family="Arial" font-size="10" fill="#aaaaaa">  "context": { ... }</text>
  <text x="615" y="625" font-family="Arial" font-size="10" fill="#aaaaaa">}</text>
  
  <text x="615" y="645" font-family="Arial" font-size="10" fill="#aaaaaa">Returns: GraphChatResponse</text>

  <!-- Pattern Matching Details Box -->
  <rect x="50" y="80" width="280" height="180" rx="5" ry="5" fill="#1a2233" filter="url(#drop-shadow)" opacity="0.9" />
  <text x="190" y="100" font-family="Arial" font-size="14" text-anchor="middle" fill="#ffffff">Agent Selection Logic</text>
  
  <text x="65" y="125" font-family="Arial" font-size="12" fill="#4285f4">1. Pattern Matching (Primary)</text>
  <text x="65" y="145" font-family="Arial" font-size="10" fill="#aaaaaa">• Match user query against regex patterns</text>
  <text x="65" y="160" font-family="Arial" font-size="10" fill="#aaaaaa">• If confidence > 0.7, use matched agent</text>
  
  <text x="65" y="185" font-family="Arial" font-size="12" fill="#4285f4">2. Semantic Matching (Secondary)</text>
  <text x="65" y="205" font-family="Arial" font-size="10" fill="#aaaaaa">• Compare query embeddings to agent vectors</text>
  <text x="65" y="220" font-family="Arial" font-size="10" fill="#aaaaaa">• If similarity > 0.5, use best match</text>
  
  <text x="65" y="245" font-family="Arial" font-size="12" fill="#4285f4">3. Fallback Logic</text>
  <text x="65" y="260" font-family="Arial" font-size="10" fill="#aaaaaa">• Check if message is conversational</text>
  <text x="65" y="275" font-family="Arial" font-size="10" fill="#aaaaaa">• Default to General Conversation agent</text>
</svg>
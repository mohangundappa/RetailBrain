Revised Expert Recommendation for Prototyping Stage
Given you're in a prototyping phase and will eventually leverage the Databricks ecosystem for deployment, AI/ML Ops, and telemetry, my recommendation shifts significantly:

Go All-In with LangGraph's Native Orchestration
For a prototype that will evolve into a Databricks-based production system, I strongly recommend:

Adopt LangGraph's Graph-Based Execution Model Fully:

Rebuild the orchestrator using LangGraph's native graph structures
Define your agent selection logic as nodes in the graph with conditional edges
This gives you the most future-proof foundation that aligns with how advanced AI workflows are trending
Leverage LangGraph's State Management:

Replace our custom session history with LangGraph's state containers
This provides cleaner persistence and better integration with observability tools
Design for Databricks Integration:

LangGraph's graph-based approach will integrate more naturally with Databricks' workflow orchestration
The declarative nature of LangGraph graphs makes them easier to deploy and version in MLOps environments
Prioritize Observability:

Use LangGraph's built-in tracing capabilities which will give you better visibility into execution paths
This will be vital when moving to production on Databricks
Specific Implementation Approach
Create a top-level graph where:

Initial nodes handle intent classification and agent selection
Each agent is represented as a subgraph that can be called from the main graph
State transitions explicitly model the conversation flow
Use LangGraph's state containers to track:

Conversation history
Extracted entities
Selected agent information
Confidence scores
Design the graph to enable:

Agent interruptions through explicit state transitions
Context preservation between interactions
Parallel processing of certain operations (entity extraction, pattern matching)
This approach will give you the strongest foundation for your prototype and make the transition to a Databricks production environment much smoother, as you'll be working with structures that naturally align with modern orchestration platforms.